module std.core;

class Option {
    let _value;
    let _isNil;

    fn value() {
        return this._value;
    }

    fn isSome() {
        return !this._isNil;
    }

    fn isNone() {
        return this._isNil;
    }
}

fn some(value) {
    return Option(
        _value: value,
        _isNil: false
    );
}

fn none() {
    return Option(
        _value: 0,
        _isNil: true
    );
}

class String {
    let value;
    let length;
}

class Int {
    let value;
}

class Float {
    let value;
}

class RangeIter {
    let from;
    let to;
    let mut index;

    fn next() {
        let index = this.from + this.index;

        if index >= this.to {
            return none();
        }

        let value = some(index);

        this.index = this.index + 1;

        return value;
    }
}

class Range {
    let from;
    let to;

    fn iter() {
        return RangeIter(from: this.from, to: this.to, index: 0);
    }

    fn collect() {
        let mut output = [];

        for this {
            output.push(.);
        }

        return output;
    }
}

class ArrayIter {
    let array;
    let mut index;

    fn next() {
        if this.index >= this.array.length {
            return none();
        }

        let value = this.array.nth(this.index);

        this.index = this.index + 1;

        return value;
    }
}

class Array {
    let data;
    let length;

    fn nth(index) {
        if index < 0 || this.length <= index {
            return none();
        }

        return some(this.data[index]);
    }

    fn first() {
        return this.nth(0);
    }

    fn last() {
        return this.nth(this.length-1);
    }

    fn iter() {
        return ArrayIter(array: this, index: 0);
    }

    fn slice(range) {
        let mut output = [];

        for range {
            output.push(this.data[.]);
        }

        return output;
    }

    fn contains(value) {
        for this {
            if . == value {
                return true;
            }
        }

        return false;
    }
}

class KeyValue {
    let key;
    let value;
}

class MapIter {
    let data;
    let keys;
    let mut index;

    fn next() {
        if this.index >= this.keys.length {
            return none();
        }

        let key = this.keys[this.index];
        let key_value = KeyValue(key: key, value: this.data[key]);

        this.index = this.index + 1;

        return some(key_value);
    }
}

class Map {
    let value;

    fn iter() {
        return MapIter(data: this.value, keys: this.keys(), index: 0);
    }

    fn get(key) {
        if !this.keys().contains(key) {
            return none();
        }

        return some(this.value[key]);
    }

    fn set(key, value) {
        this.value[key] = value;
    }
}
