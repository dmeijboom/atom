module std.core;

class Option {
    let _value;
    let _isNil;

    fn value() {
        return this._value;
    }

    fn isSome() {
        return !this._isNil;
    }

    fn isNone() {
        return this._isNil;
    }
}

fn some(value) {
    return Option(
        _value: value,
        _isNil: false
    );
}

fn none() {
    return Option(
        _value: 0,
        _isNil: true
    );
}

class String {
    let value;
    let length;
}

class Int {
    let value;
}

class Float {
    let value;
}

class RangeIter {
    let from;
    let to;
    let mut index;

    fn next() {
        if this.index > this.to {
            return none();
        }

        let value = some(this.from + this.index);

        this.index = this.index + 1;

        return value;
    }
}

class Range {
    let from;
    let to;

    fn iter() {
        return RangeIter(from: this.from, to: this.to, index: 0);
    }

    fn collect() {
        let mut output = [];
        return output;
    }
}

class ArrayIter {
    let array;
    let mut index;

    fn next() {
        if this.index >= this.array.length {
            return none();
        }

        let value = this.array.nth(this.index);

        this.index = this.index + 1;

        return value;
    }
}

class Array {
    let value;
    let length;

    fn nth(index) {
        if index < 0 || this.length <= index {
            return none();
        }

        return some(this.value[index]);
    }

    fn first() {
        return this.nth(0);
    }

    fn last() {
        return this.nth(this.length-1);
    }

    fn iter() {
        return ArrayIter(array: this, index: 0);
    }
}

class Map {
}
