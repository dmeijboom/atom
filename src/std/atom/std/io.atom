module std.io;

import std.encoding.utf8.decode;
import std.core.{Filter, GetIterator};

pub interface Readable {
    fn read();
}

pub class LinesIter extends GetIterator {
    let readable;

    pub fn next() {
        let mut buff = [];

        for {
            let bytes = this.readable.read(1);

            if buff.len() == 0 && bytes.len() == 0 {
                return nil;
            }

            if bytes.first() == some(b'\n') {
                break;
            }

            buff.push(bytes[0]);
        }

        return some(decode(buff));
    }
}

pub mixin Reader {
    pub fn readAll() {
        let mut output = [];

        for {
            let buffSize = 1024;
            let buff = this.read(buffSize);
            let len = buff.len();

            if len > 0 {
                output.append(buff);
            }

            if len < buffSize {
                return output;
            }
        }
    }

    pub fn readAllText() -> decode(this.readAll());
}

pub class LinesReader extends GetIterator {
    let readable;

    pub fn iter() -> LinesIter{readable: this.readable};
}

pub class File extends Reader {
    let fd;

    pub extern fn size();
    pub extern fn read(max);

    pub fn lines() -> LinesReader{readable: this};
}

extern fn openFileHandle(filename);

pub fn openFile(filename) {
    return File(fd: openFileHandle(filename));
}
