module std.core;

pub interface Iterable {
    fn iter();
}

pub class Option {
    let _value;
    let isNil;

    pub fn value() {
        return this._value;
    }

    pub fn isSome() {
        return !this.isNil;
    }

    pub fn isNone() {
        return this.isNil;
    }
}

pub fn some(value) {
    return Option(
        _value: value,
        isNil: false
    );
}

pub fn none() {
    return Option(
        _value: 0,
        isNil: true
    );
}

pub class String {
    pub let length;
}

pub class Int {}

pub class Float {}

pub class Char {}

pub class Byte {}

pub class Bool {}

pub class RangeIter {
    let start;
    let end;
    let mut index;

    pub fn next() {
        let index = this.start + this.index;

        if index >= this.end {
            return none();
        }

        let value = some(index);

        this.index = this.index + 1;

        return value;
    }
}

pub class Range {
    pub fn iter() {
        return &RangeIter(start: this.start(), end: this.end(), index: 0);
    }

    pub fn collect() {
        let mut output = [];

        for this {
            output.push(.);
        }

        return output;
    }
}

pub class ArrayIter {
    let array;
    let mut index;

    pub fn next() {
        if this.index >= this.array.len() {
            return none();
        }

        let value = this.array.nth(this.index);

        this.index = this.index + 1;

        return value;
    }
}

pub class Array {
    pub fn nth(index) {
        if index < 0 || this.len() <= index {
            return none();
        }

        unsafe {
            return some(this[index]);
        }
    }

    pub fn first() {
        return this.nth(0);
    }

    pub fn last() {
        return this.nth(this.len()-1);
    }

    pub fn iter() {
        return &ArrayIter(array: this, index: 0);
    }

    pub fn append(other) {
        for {
            let item = other.pop(0);

            if !item.isSome() {
                break;
            }

            this.push(item.value());
        }
    }

    pub fn slice(range) {
        let mut output = [];

        for range {
            unsafe {
                output.push(this[.]);
            }
        }

        return output;
    }

    pub fn contains(value) {
        for this {
            if . == value {
                return true;
            }
        }

        return false;
    }
}

pub class KeyValue {
    pub let key;
    pub let value;
}

pub class MapIter {
    let data;
    let keys;
    let mut index;

    pub fn next() {
        if this.index >= this.keys.len() {
            return none();
        }

        unsafe {
            let key = this.keys[this.index];
            let key_value = KeyValue(key: key, value: this.data[key]);

            this.index = this.index + 1;

            return some(key_value);
        }
    }
}

pub class Map {
    pub fn iter() {
        return &MapIter(data: this, keys: this.keys(), index: 0);
    }

    pub fn get(key) {
        if !this.keys().contains(key) {
            return none();
        }

        unsafe {
            return some(this[key]);
        }
    }

    pub fn set(key, value) {
        unsafe {
            this[key] = value;
        }
    }
}
