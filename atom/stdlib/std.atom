import std/os;

// Builtin classes
pub class Array {
    fn push(self, elem) => @array_push(self, elem);
    fn len(self) => @read_usize(@ptr(self), 0);
    fn cap(self) => @read_usize(@ptr(self), 8);
}

pub class Str {
    fn len(self) => @read_usize(@ptr(self), 0);
}

// Iteration functions
pub fn* enum(inner) {
    let i = 0;

    for elem in inner {
        yield [i, elem];
        i += 1;
    }
}

pub fn* chunks(array, size) {
    let total_chunks = array.len() / size;
    
    for let i = 0; i < total_chunks; i += 1 {
        let offset = i * size;
        yield array[offset:offset + size];
    }
}

pub fn* each(array) {
    for let i = 0; i < array.len(); i += 1 {
        yield array[i];
    }
}

pub fn* range(from, to) {
    for let i = from; i < to; i += 1 {
        yield i;
    }
}

// Utility functions
pub fn repeat(elem, count) {
    let out = [];

    for let i = 0; i < count; i += 1 {
        out.push(elem);
    }

    out
}

pub fn println(val) {
    let line;

    if val is Str {
        line = val;
    } else {
        line = @repr(val);
    }

    line = line ^ "\n";

    @syscall4(os.platform.SYS_WRITE, os.STDOUT, @data_ptr(line), line.len());
}
