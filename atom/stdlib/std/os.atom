class Sys {}

let sys = Sys();
self.sys = sys;

if @is_darwin() {
    sys.WRITE = 4;
    sys.GETTIMEOFDAY = 116;
} else {
    if @is_arm64() {
        sys.WRITE = 64;
        sys.GETTIMEOFDAY = 169;
        sys.NANOSLEEP = 101;
    } else {
        sys.WRITE = 1;
        sys.GETTIMEOFDAY = 96;
        sys.NANOSLEEP = 35;
    }
}

self.STDIN = 0;
self.STDOUT = 1;
self.STDERR = 2;

fn array_ptr(array) {
    // Read the pointer to the GC Handle
    let handle = @ptr(array);

    // Skip len/cap and get the pointer to the array
    @read_usize(handle, 16)
}

// Syscalls

class TimeOfDay {
    fn init(self, secs, usecs) {
        self.secs = secs;
        self.usecs = usecs;
    }
}

pub fn nanosleep(nsecs) {
    // On darwin there is no nanosleep syscall
    if @is_darwin() {
        let buff = @blob(16);
        let raw = array_ptr(buff);

        @mach_timebase_info(raw);

        let numer = @read_u32(raw, 0);
        let denom = @read_u32(raw, 4);
        let now = @mach_absolute_time();

        @mach_wait_until(now + (nsecs * denom / numer));
    } else {
        let buff = @blob(16);
        let raw = array_ptr(buff);

        @write_usize(raw, 0, nsecs / 1000000000);
        @write_usize(raw, 8, nsecs % 1000000000);
        @syscall3(sys.NANOSLEEP, raw, 0, 0);
    }
}

pub fn gettimeofday() {
    let buff = @blob(16);
    let raw = array_ptr(buff);

    if @syscall3(sys.GETTIMEOFDAY, raw, 0, 0) != 0 {
        return :nil;
    }

    TimeOfDay(
        @read_usize(raw, 0),
        @read_usize(raw, 8)
    )
}

pub fn write(fd, line) {
    let raw = array_ptr(line);
    @syscall3(sys.WRITE, fd, raw, line.len());
}
